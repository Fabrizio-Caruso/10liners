CODE DOCUMENTATION

I) Code segments 

- [Start of outer loop] Initialization
0m=87:j=.:w=36:g=-117:n=53280:pOn,0:pOn+1,0:v=54296:d=1904:?"{clear}{gray}use ijkl space"
1t=v-24:p=1524:o=1143:fOi=1top:nE:h=81:?"{clear}":q=1:fOi=0to39:pOo-i,102:pOd+i,102:nE

- [Start of inner/match loop] Title with graphics + Record check
2?"{home}{down}            {light gray}{119}{gray}{119}{dark gray}{119}  {red}mines  {dark gray}{119}{gray}{119}{light gray}{119}{white}     (fc)":ifpE(p)=wtHj=j+4:iff>0tHf=f-1

- Set players color + Generate mines around the player
3ifrN(0)>qtHx=p-4+2*(int(rN(0)*5))+80*((int(rN(0)*3))-1):pOx,m:pOx+t,1

- Compute "l" and "z" to decide if charges can appear
4l=jaN1:z=j>w:...:ifj>h+mtHl=-1

- Display player shape and set its color to white
4...:pOp,h:pOp+t,1:...

- Handle imput for I J K L keys (see "IJKL double symmetry" trick below)
4...:gEa$:s=.:y=.:...:ifa$<>""tHs=aS(a$):e=saN1:...
5c=s-75+e:ifc>-3tHifc<2tHy=1:pOv,15:pOv,0:pOp,m:p=p+c*(39*e+1):j=j+1:q=q-.004

- Make latest charge brown + Make player's color red + Score board + Record check
6pOo+g+t,8:pOp+t,2:?"{home}  {yellow}$:{white}";9-f;"  {gray}score:{white}";j;"  {dark gray}high score:{white}";r:ifj>rtHr=j

- Handle input for " " and its action
7ifa$=" "tHiff<9tHpOn,2:pOp-1,32:pOp+1,32:pOp-40,32:pOp+40,32:f=f+1:pOn,0:pOp,90

- Update previous charge + Generate random extra anti-mine charges (-117 is the offset pointing to the $ in the score board)
8pOo+g+t,7:pOo+g,w:if-ytHifztHg=-117:ifltHg=int(rN(0)*760):pOo+g+t,4:pOo+g,90

- Handle player on mine or on walls
9on-((p<daNp>o)aN(pE(p)<>m))gO2:f=.:pOp,h:?"the end":pO198,0:wA198,1:pO198,0:gO0



II) Some Variables
- m mine character 
- h "hero" character
- p is the position of the player
- x is the position of the mines that appear around the player
- j is the score
- r is the record
- f is the number of used anti-mine charges (9 - number of remaining charges)
- y is a Boolean to detect the player's movement
- q is the 1-complement of the probability of a new mine popping up around the player
- d lower border position
- o upper border position
- t is the difference between the video memory address and the color ram address, i.e., <addr>+t is used to set the color corresponding to the position whose data (not color) is pointed by <addr>



III)  "IJKL double symmetry" formula

I exploit the special symmetry of the ASCII codes of the keys I J K L:
- I and K have odd codes and a distance of 2 bytes
- J and L have even codes and a distance of 2 bytes
- I and K describe positions on the video memory BEFORE the current position
- J and L desrcive positions on the video memory AFTER the current position
So, given s=ASC(a$) with a$ either I or J or K or L, we update the position p with
p=p+c*(39*e+1) 
where
- e=s and 1 -> parity of the code, i.e., vertical vs horizontal movement
- c=s-75+e -> separate before or after in the video memory, i.e., -1 for left/up vs +1 for right/down
- 39e+1 -> vertical vs horizontal offset absolute value, i.e., 1 vs 40 

