MINIMANS20 by Fabrizio Caruso

Expanded (no abbreviations), indented and commented code

IMPORTANT VARIABLES:
- b: width of the road (-1)
- i: points/progress counter
- r: record
- d: left/straight/right flag
- o: left road offset
- s: enemy car position
- g: position of the highest lights (produced by the headlights)
- j: day/night flag 
- h: position of the two-lane separator


CODE:
0
// Move basic top and variables not to overwrite ram-mapped characters
poke56,26:poke52,26:

// Initialize some variables
m=.:v=36878:x=132:

// [TRICK] Map characters at $1C00 -> This has the effect of keeping reversed characters as mapped in rom (no need to copy from rom into ram) 
poke646,1:pokev-9,255:

// Redefine "@" (screen code 0)
forp=0to7:readb:poke7168+p,b:next


1
// Initialize some variables
a=511:z=218:d=1:p=8174:y=216:

// Set auto-repeat on
poke650,z:

// Clear screen and set foreground color to black
print"{black}{clear}":

// Set string variables (left and right road borders)
l$="{green}{reverse on}{120*2}{black}{230}{reverse off}":r$="{reverse on}{black}{230}{green}{120*2}":

// Check if new record is set, if yes, update it
if i>r then
    r=i

	
2
// Set some variables
w=30:b=9:q=3:n=v+1:t=30720:o=4:e=22:

// Set background and border to day color (white)
poken,25:

// Display start road
fori=0to19:
    printtab(5)"{reverse on}{230}{191}"spc(9)"{reverse on}{191}{230}":
next

// Set points to zero
i=.


// Inner/game loop starts here
3
    // Compute width of the road (b=width-1)
    b=b+((ianda)=0):

    // Set day/night background and border color
    poken,25-17*j:    
 
    // Compute day/night flag
    j=band1:
    
    // Increase points
    i=i+1:
    
    // If i mod 8 = 0 then:
    // - compute road change (-1 for left, 0 no change, +1, right)
    // - compute two-lane road flag
    if (i and 7)=0 then
        d=int(rnd(1)*q):
        c=7727*(d=1)

		
4
    // Initialize enemy car to empty space
    c$=" ":
    
    // Compute enemy car position
    s=int(rnd(1)*(b+1)):
    
    // If player hits border or enemy cars then:
    // - Set border to red and background to white
    // - Increase damage
    // - Set border and background to red
    // - Make a beep sound by bit-banging on the volume register
    if peek(p-e)<>32 then 
        poken,2:
        l=l+1:
        poken,42:
        pokev,15:pokev,0:
		
		// First byte of the car character definition
		data24

	
5 
    // Read the keyboard status
    geta$:
    
    // If i is even or d=1, then set c$ to car shape with alternating blue/green color 
    // d=1 -> straight line selected. Remark: straight lines are also possible with d<>1 when the curve is not possible
    if (d=1)or(iand1)=0 then
        c$=chr$(w+(fand1))+"@":
        f=f+1:
    
	// Most of the car character definition
	data189,255,165,36,189,255,165
 

6
    // If j is set to night, than activate the car lights by setting the color attributes to white at some lines above the player's car
    g=p+t-1-j*x:
    pokeg,j:
    pokeg+2,j:

    // [Trick] Scroll down
    print"{home}{down}{left}{148}":
    
    // [Trick] Force the editor to believe the line is a continuation of the other lines
    pokez,x:
    
    // Display the player's car
    pokep+t,2:pokep,m:
    
    // If the player reaches a tree, his damage is set to max
    if peek(p-e)=y then
        l=9


7
    // Display the next line of the road with possibly an enemy car
    printspc(o)l$spc(s)c$spc(b-s)r$:
 
    // Display two-lane separator
    pokeh+t,6:pokeh,230: 
    
    // If a key is pressed, then compute the next player's position
    if a$<>"" then
        k=asc(a$)-72:
        p=p+(k=2)-(k=4)


8
    // Compute position of the two-lane separator
    h=o-c+int(b/2):

    // Display score board: damage, points, high score
    print"{home}{reverse on}{red}"l" {cyan}pts{purple}"i" {cyan}hi{purple}"r:
    
    // If road's new position fits in the screen, then update border offset o
    if o>1-d then
        if o+d+b<17 then
            o=o-1+d


9
// If there is some left damage and b has not reached minimum then go back to start of inner loop
on-(l<9 and b>q)
    goto3:
    
// Otherwise: 
// - Set border and background to day color (white)
// - Display end message
// - Reset damage to 0
// - Restart game from line 1
h=.:
poken,25:
print"{home}{down*7}{black}{reverse on} {191*3}{red} the end {black}{191*3}":
l=.:
fork=0top:next:
goto1
